---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Footer from '../../components/Footer.astro';
import Header from '../../components/Header.astro';
import Title from '../../components/Title.astro';
import ParallaxImage from '../../components/ParallaxImage.astro';
import type { CollectionEntry } from 'astro:content';
import ReadingTime from '../../components/ReadingTime.astro';

interface Props {
  post: CollectionEntry<'blog'>;
}

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// 2. For your template, you can get the entry directly from the prop
const { post } = Astro.props;
const { Content } = await post.render();
const siteBaseURL = new URL(Astro.url);
const pubDate = new Date(post.data.pubDate);
const formattedDate = pubDate.toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
});

const article = {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": post.data.title,
  "description": post.data.description,
  "image": post.data.cover.src,
  "author": {
    "@type": "Person",
    "name": "Pier Gorelli"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Pier Gorelli",
    "logo": {
      "@type": "ImageObject",
      "url": "https://piergorelli.com/logo.png"
    }
  },
  "datePublished": pubDate.toISOString(),
  "dateModified": pubDate.toISOString()
};
---
<Layout
seo={{
	title: post.data.title,
	description: post.data.description,
  openGraph: {
    basic: {
      image: post.data.cover.src,
      title: post.data.title,
      type: 'article',
      url: `https://piergorelli.com/blog/${post.slug}`,
    },
    optional: {
      description: post.data.description,
      siteName: 'PierGorelli.com',
    },
  },
  twitter: {
      title: post.data.title,
      description: post.data.description,
      creator: '@PGorelli91424',
      image: new URL(post.data.cover.src, siteBaseURL),
      card:  post.data.cover.src ? 'summary_large_image' : 'summary',
  }
}}
schema={article}
>
  <Header textColor="black" headerClasses="bg-white" menuColor="#000000"/>
  <main>
    <Title title={post.data.title} subTitle={formattedDate} />
		<ParallaxImage
			src={post.data.cover.src}
			alt="About me"
			class="w-100 h-[46vw] object-cover"
		/>
    <div class="container mx-auto">
      <div class="flex justify-center pt-28 lg:pt-48 w-full">
        <div class="flex flex-col  prose lg:prose-xl">
          <article>
            <div class="post-meta">
              <ReadingTime content={post.body} />
            </div>
            <Content />
          </article>
        </div>
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<style>
  .post-meta {
    display: flex;
    gap: 1rem;
    color: #666;
    margin-bottom: 2rem;
  }
</style>