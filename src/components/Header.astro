---
export interface MenuItem {
  href: string;
  title: string;
  body: string;
}

const { textColor = 'black', headerClasses = '', backgroundColor = 'bg-white' } = Astro.props;


const pages: MenuItem[] = [
	{ title: 'About me', href: '/about', body: 'Learn how Astro works and explore the official API docs.' },
	{ title: 'Services', href: '/services', body: 'Supercharge your project with new frameworks and libraries.' },
	{ title: 'Blog', href: '/blog', body: 'Explore a galaxy of community-built starter themes.' },
	{ title: 'Contact', href: '/contact', body: 'Come say hi to our amazing Discord community. ❤️' },
];

---

<header class={`absolute z-10 w-full ${headerClasses}`}>
  <div class={`container mx-auto py-4 relative z-20 ${backgroundColor}`}>
    <div class="flex justify-between items-center">
      <a href="/" class={`text-${textColor} text-xl font-bold`}>Pier Gorelli</a>
      <nav class="flex justify-between items-center">
        <ul class="items-center hidden sm:flex">
            { pages.map((item) => (
              <li class={`flex mr-4 text-${textColor}`}><a href={item.href} class="group overflow-hidden relative inline-block ml-[1vw]" title={item.body} style="height:max-content;"><span data-hover={item.title} class="relative inline-block transition duration-300 before:content-[attr(data-hover)] before:absolute before:top-[100%] group-hover:translate-y-[-100%] before:translate-3d-0">{item.title}</span></a></li>
            ))}
        </ul>
        <button type="button" class="relative sm:hidden inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" aria-controls="mobile-menu" aria-expanded="false">
          <span class="absolute -inset-0.5"></span>
          <span class="sr-only">Open main menu</span>
          <svg class="block h-6 w-6 open-icon" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
          </svg>
          <svg class="hidden h-6 w-6 close-icon" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
          </svg>
        </button>
      </nav>
    </div>
  </div>
  <div class="hidden sm:hidden bg-[#13151a] transform transition-all duration-300 ease-in-out -translate-y-full z-10" id="mobile-menu">
    <div class="space-y-1 px-2 pb-3 pt-2">
      { pages.map((item) => (
        <a href={item.href} class="block rounded-md bg-[#13151a] px-3 py-2 text-base font-medium text-white" title={item.body}>{item.title}</a>
      ))}
    </div>
  </div>
  
</header>

<script>
  const mobileMenu = document.getElementById('mobile-menu');
  const button = document.querySelector('button[aria-controls="mobile-menu"]');

  if(button && mobileMenu) {
    const openIcon = button.querySelector('.open-icon');
    const closeIcon = button.querySelector('.close-icon');

    button.addEventListener('click', () => {
      const expanded = button.getAttribute('aria-expanded') === 'true' || false;
      button.setAttribute('aria-expanded', String(!expanded));
      if (expanded) {
        // Chiusura del menu (nascondere con animazione)
        mobileMenu.classList.add('-translate-y-full');
       
      } else {
        // Apertura del menu (mostrare con animazione)
        mobileMenu.classList.remove('hidden');
        setTimeout(() => {
          mobileMenu.classList.remove('-translate-y-full');
        }, 10); // Piccolo ritardo per avviare l'animazione
      }

      //mobileMenu.classList.toggle('hidden');
      if(openIcon && closeIcon) {
        openIcon.classList.toggle('hidden');
        closeIcon.classList.toggle('hidden');
      }
    });
  }
</script>